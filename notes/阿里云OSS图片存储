首先要实现图片上传：
1，建议单独创建一个模块，专门用于上传图片

yml配置：
spring
  servlet:
    multipart:
      max-file-size: 5MB # 限制文件上传的大小

2，创建配置类  见模块leyou-upload里面



阿里云对象存储OSS

.什么是分布式文件系统

分布式文件系统（Distributed File System）是指文件系统管理的物理存储资源不一定直接连接在本地节点上，而是通过计算机网络与节点相连。

通俗来讲：

- 传统文件系统管理的文件就存储在本机。
- 分布式文件系统管理的文件存储在很多机器，这些机器通过网络连接，要被统一管理。无论是上传或者访问文件，都需要通过管理中心来访问

常见的分布式文件系统有谷歌的GFS、HDFS（Hadoop）、TFS（淘宝）、Fast DFS（淘宝）等。

阿里的OSS就是一个文件云存储方案：

 开通oss访问

1，首先登陆阿里云，然后找到对象存储的产品：
2，点击进入后，开通服务：
3，随后即可进入管理控制台：

- 存储空间（Bucket）
- 访问域名（Endpoint）
- 访问密钥（AccessKey）：包含了AccessKeyId 和AccessKeySecret。

4，在控制台的右侧，可以看到一个新建Bucket按钮：
5，点击后，弹出对话框，填写基本信息：
注意点：

- bucket：存储空间名称，名字只能是字母、数字、中划线
- 区域：即服务器的地址，这里选择了上海
- Endpoint：选中区域后，会自动生成一个Endpoint地址，这将是我们访问OSS服务的域名的组成部分
- 存储类型：默认
- 读写权限：这里我们选择公共读，否则每次访问都需要额外生成签名并校验，比较麻烦。敏感数据不要请都设置为私有！
- 日志：不开通

6，有了bucket就可以进行文件上传或下载了。不过，为了安全考虑，我们给阿里云账户开通一个子账户，并设置对OSS的读写权限。

6，点击屏幕右上角的个人图像，然后点击访问控制：
7，在跳转的页面中，选择用户，并新建一个用户：
8，然后填写用户信息：
9，然后会为你生成用户的AccessKeyID和AccessKeySecret：
10，点击添加权限，会进入权限选择页面，输入oss进行搜索，然后选择管理对象存储服务（OSS）权限：

--上传方式： 直接从前端（客户端浏览器）上传文件到OSS。


web前端直传分析

阿里官方文档中，对于web前端直传又给出了3种不同方案：

- JavaScript客户端签名直传：客户端通过JavaScript代码完成签名，然后通过表单直传数据到OSS。
- 服务端签名后直传：客户端上传之前，由服务端完成签名，前端获取签名，然后通过表单直传数据到OSS。
- 服务端签名直传并设置上传回调：服务端完成签名，并且服务端设置了上传后回调，然后通过表单直传数据到OSS。OSS回调完成后，再将应用服务器响应结果返回给客户端。

各自有一些优缺点：

- JavaScript客户端签名直传：
  - 优点：在客户端通过JavaScript代码完成签名，无需过多配置，即可实现直传，非常方便。
  - 问题：客户端通过JavaScript把AccesssKeyID 和AccessKeySecret写在代码里面有泄露的风险
- 服务端签名，JavaScript客户端直传：
  - 优点：Web端向服务端请求签名，然后直接上传，不会对服务端产生压力，而且安全可靠
  - 问题：服务端无法实时了解用户上传了多少文件，上传了什么文件
- 服务端签名直传并设置上传回调：
  - 优点：包含服务端签名后客户端直传的所有优点，并且可以设置上传回调接口路径。上传结束后，OSS会主动将上传的结果信息发送给回调接口。

经过一番分析，大家觉得我们会选哪种方案？

这里我们选择第二种，因为我们并不需要了解用户上传的文件的情况。

服务端签名后直传流程

服务端签名后直传的原理如下：

1. 用户发送上传Policy请求到应用服务器（我们的微服务）。
2. 应用服务器返回上传Policy和签名给用户。
3. 用户直接上传数据到OSS。

根据上面的流程，我们需要做的事情包括：

- 改造文件上传组件，达成下面的目的：
  - 上传文件前，向服务端发起请求，获取签名
  - 上传时，修改上传目的地到阿里OSS服务，并携带上传的签名
- 编写服务端接口，接收请求，生成签名后返回
在阿里云里面设置跨域规则，详情看图片

相关依赖：
<dependency>
    <groupId>com.aliyun.oss</groupId>
    <artifactId>aliyun-sdk-oss</artifactId>
    <version>3.4.2</version>
    <scope>compile</scope>
</dependency>


yml看leyou-upload配置

然后通过配置类加载：
并通过一个Bean来配置：
